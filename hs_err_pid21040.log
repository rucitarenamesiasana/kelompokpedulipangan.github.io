#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 32744 bytes. Error detail: Chunk::new
# Possible reasons:
#   The system is out of physical RAM or swap space
#   This process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Zero Based Compressed Oops mode in which the Java heap is
#     placed in the first 32GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 32GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (arena.cpp:168), pid=21040, tid=35560
#
# JRE version: OpenJDK Runtime Environment (21.0.6) (build 21.0.6+-13368085-b895.109)
# Java VM: OpenJDK 64-Bit Server VM (21.0.6+-13368085-b895.109, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: git4idea.http.GitAskPassApp Username for 'https://github.com': 

Host: Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz, 12 cores, 15G,  Windows 10 , 64 bit Build 19041 (10.0.19041.5915)
Time: Mon Jul  7 13:46:04 2025 SE Asia Standard Time elapsed time: 0.331064 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x000002167f08a750):  JavaThread "C1 CompilerThread0" daemon [_thread_in_native, id=35560, stack(0x000000b451400000,0x000000b451500000) (1024K)]


Current CompileTask:
C1:331  209       3       java.math.BigInteger::<init> (404 bytes)

Stack: [0x000000b451400000,0x000000b451500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6d0639]
V  [jvm.dll+0x85eb03]
V  [jvm.dll+0x86105e]
V  [jvm.dll+0x861743]
V  [jvm.dll+0x27e6e6]
V  [jvm.dll+0xbff6d]
V  [jvm.dll+0xc04a3]
V  [jvm.dll+0x193923]
V  [jvm.dll+0x1939ed]
V  [jvm.dll+0x19602e]
V  [jvm.dll+0x197c94]
V  [jvm.dll+0x150403]
V  [jvm.dll+0x14fca8]
V  [jvm.dll+0x14fee6]
V  [jvm.dll+0x14f25f]
V  [jvm.dll+0x151081]
V  [jvm.dll+0x2569ac]
V  [jvm.dll+0x254ef6]
V  [jvm.dll+0x3f0e96]
V  [jvm.dll+0x806ed8]
